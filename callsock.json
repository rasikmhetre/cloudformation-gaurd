{
  "Parameters": {
    "NetworkStack": {
      "Description": "Name of the stack that this stack references for networking and shared resources",
      "Default": "",
      "Type": "String"
    }
  },
  "Conditions": {
    "StackIsSk1": {
      "Fn::Equals": [
        {
          "Ref": "NetworkStack"
        },
        "sk1"
        ]
    },
    "StackNameIsNotIn1CallsockSwiggy": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::StackName"
            },
            "in1-Callsock-Swiggy-1"
          ]
        }
      ]
    }
  },
  "Resources": {
    "ApiDirectcallUploadCallRecordingsS3Bucket": {
      "Condition": "StackNameIsNotIn1CallsockSwiggy",
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        }
      }
    },
    "CallsockEcsCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {}
    },
    "CallsockM2PEcsCluster": {
      "Condition":"StackIsSk1",
      "Type": "AWS::ECS::Cluster",
      "Properties": {}
    },
    "CallsockDeploymentS3BucketKmsKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "KeyUsedForCallsockDeploymentS3BucketKmsKey",
        "Enabled": true,
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "key-default-1",
          "Statement": [
            {
              "Sid": "EnableIamPoliciesToGiveIamUsersAndRolesInTheAccountAccessToThisCmk",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    ":",
                    [
                      "arn:aws:iam:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      "root"
                    ]
                  ]
                }
              },
              "Action": "kms:*",
              "Resource": "*"
            },
            {
              "Sid": "AllowS3ECSandECSTASKSToUseThisKey",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs-tasks.amazonaws.com",
                  "ecs.amazonaws.com",
                  "s3.amazonaws.com",
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "kms:Encrypt*",
                "kms:Decrypt*",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:Describe*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Tags": [
          {
            "Key": "ct-aws:cloudformation:stack-name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Identifier",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-CallsockDeploymentS3BucketKmsKey"
            }
          }
        ]
      }
    },
    "CallsockEc2InstanceIamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Sid": "RoleMappedToContainerInstancesViaEc2InstanceIamInstanceProfile",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/"
      }
    },
    "CallsockEc2InstanceIamPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "CallsockEc2InstanceIamPolicy"
            ]
          ]
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Sid": "AutoscalingGroup",
              "Effect": "Allow",
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:SetDesiredCapacity"
              ],
              "Resource": "*"
            },
            {
              "Sid": "WriteLogsToCloudWatchLogs",
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowBootstrapViaCloudInitToBeAbleToDescribeTags",
              "Effect": "Allow",
              "Action": [
                "ec2:DescribeTags"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowInteractionWithEcsCluster",
              "Effect": "Allow",
              "Action": [
                "ecs:DeregisterContainerInstance",
                "ecs:DiscoverPollEndpoint",
                "ecs:Poll",
                "ecs:RegisterContainerInstance",
                "ecs:StartTelemetrySession",
                "ecs:Submit*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowSsmAgentToFunction",
              "Effect": "Allow",
              "Action": [
                "ec2messages:*",
                "ssm:ListAssociations",
                "ssm:ListInstanceAssociations"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowTwoWayWebsocketChannelComminicationBetweenTheClientBrowserOrCliAndRemoteManagedInstance",
              "Effect": "Allow",
              "Action": [
                "ssmmessages:*",
                "ssm:UpdateInstanceInformation"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowEc2InstanceToStartStopEventstoreInstances",
              "Effect": "Allow",
              "Action": [
                "ec2:StartInstances",
                "ec2:StopInstances",
                "ec2:DescribeTags"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
                }
              ]
            },
            {
              "Sid": "AllowSsmAccessToCloudWatchLogGroup",
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::ImportValue": {
                  "Fn::Sub": "${NetworkStack}-SharedResources-SsmLogsLogGroupArn"
                }
              }
            },
            {
              "Sid": "AllowSsmAgentToPutLogsToS3",
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:AbortMultipartUpload",
                "s3:ListMultipartUploadParts",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads"
              ],
              "Resource": [
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": "${NetworkStack}-SharedResources-SsmS3BucketArn"
                  }
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::ImportValue": {
                          "Fn::Sub": "${NetworkStack}-SharedResources-SsmS3BucketArn"
                        }
                      },
                      "*"
                    ]
                  ]
                }
              ]
            },
            {
              "Sid": "AllowAccessFromCallsockInstancesToWritetoApiDirectcallUploadCallRecordingsS3Bucket",
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket",
                "s3:PutObject",
                "s3:PutObjectAcl",
                "s3:CreateMultipartUpload",
                "s3:ListMultipartUploadParts",
                "s3:ListBucketMultipartUploads"
              ],
              "Resource": [
                {
                  "Fn::Sub":"arn:aws:s3:::${NetworkStack}-api-directcall-1-apidirectcalluploadcallrecor-*"
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::Sub":"arn:aws:s3:::${NetworkStack}-api-directcall-1-apidirectcalluploadcallrecor-*"
                      },
                      "*"
                    ]
                  ]
                }
              ]
            },
            {
              "Sid": "AllowPollerToDescribeEc2Instances",
              "Effect": "Allow",
              "Action": [
                "ec2:DescribeInstances"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowAccesstoVoipSqsQueue",
              "Effect": "Allow",
              "Action": [
                "SQS:SendMessage",
                "SQS:ReceiveMessage"
              ],
              "Resource": "arn:aws:sqs:*:062484260092:*-SharedResources-VoipSqsUploadSqsQueue-*"
            },
            {
              "Sid": "AllowCallsockAgentToGetKMSGeneratedDataKeyWhenAccessingS3Bucket",
              "Effect": "Allow",
              "Action": [
                "kms:GenerateDataKey",
                "kms:Decrypt"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowSecretsRetreiveValue",
              "Effect": "Allow",
              "Action": [
                "secretsmanager:GetSecretValue"
              ],
              "Resource": [
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": "${NetworkStack}-SharedResources-ArtifactoryDockerUserCredentialsSecretsManagerSecretName"
                  }
                },
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": "${NetworkStack}-SharedResources-SignedCallsRSAPrivateSecretsManagerSecretName"
                  }
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CallsockEc2InstanceIamRole"
          }
        ]
      }
    },
    "CallsockEc2InstanceIamInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "CallsockEc2InstanceIamRole"
          }
        ]
      }
    },
    "CallsockSignedCallMongoPasswordSecretsManagerSecret": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Description": {
          "Fn::Sub": "This is a Secrets Manager secret for Mongo Password in callsock"
        },
        "SecretString": "{\"password\":\"changeme\"}"
      }
    },
    "CallsockSignedCallAmiPasswordSecretsManagerSecret": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Description": {
          "Fn::Sub": "This is a Secrets Manager secret for Ami Password in callsock"
        },
        "SecretString": "{\"password\":\"changeme\"}"
      }
    },
    "CallsockAutoScalingAlarmNotificationSqsQueue":{
      "Condition":"StackIsSk1",
      "Type" : "AWS::SQS::Queue",
      "Properties" : {
      }
    },
    "CallsockAutoScalingAlarmNotificationSqsQueuePolicy": {
      "Condition":"StackIsSk1",
      "DependsOn": "CallsockAutoScalingAlarmNotificationSqsQueue",
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [
          {
            "Ref": "CallsockAutoScalingAlarmNotificationSqsQueue"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "sns.amazonaws.com"
              },
              "Action": "sqs:SendMessage",
              "Resource": {
                "Fn::GetAtt":[
                  "CallsockAutoScalingAlarmNotificationSqsQueue",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": { 
                    "Fn::GetAtt": [
                      "CallsockAutoScalingAlarmNotificationSnsTopic",
                      "TopicArn"
                    ]
                  }
                }
              }
            }
          ]
        }
      }
    },
    "CallsockAutoScalingAlarmNotificationSnsTopic":{
      "Condition":"StackIsSk1",
      "Type" : "AWS::SNS::Topic",
      "Properties" : {
          "Subscription" : [
            {
              "Endpoint" : {
                "Fn::GetAtt":[
                  "CallsockAutoScalingAlarmNotificationSqsQueue",
                  "Arn"
                ]
              },
              "Protocol" : "sqs"
            }
          ],
          "TopicName" : {
            "Fn::Join":[
              "-",
              [
                {
                  "Ref":"NetworkStack"
                },
                "CallsockAutoScalingAlarmNotification"
              ]
            ]
          }
        }
    }
  },
  "Outputs" : {
    "CallsockEcsClusterName": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-Service-CallsockEcsClusterName"
        }
      },
      "Value": {
        "Ref": "CallsockEcsCluster"
      }
    },
    "CallsockM2PEcsClusterName": {
      "Condition":"StackIsSk1",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-Service-CallsockM2PEcsClusterName"
        }
      },
      "Value": {
        "Ref": "CallsockM2PEcsCluster"
      }
    },
    "CallsockAutoScalingAlarmNotificationSnsTopicArn": {
      "Condition":"StackIsSk1",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-Service-CallsockAutoScalingAlarmNotificationSnsTopicArn"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "CallsockAutoScalingAlarmNotificationSnsTopic",
          "TopicArn"
        ]
      }
    },
    "CallsockSignedCallMongoPasswordSecretsManagerSecretName": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-Service-CallsockSignedCallMongoPasswordSecretsManagerSecretName"
        }
      },
      "Value": {
        "Ref": "CallsockSignedCallMongoPasswordSecretsManagerSecret"
      }
    },
    "CallsockSignedCallAmiPasswordSecretsManagerSecretName": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-Service-CallsockSignedCallAmiPasswordSecretsManagerSecretName"
        }
      },
      "Value": {
        "Ref": "CallsockSignedCallAmiPasswordSecretsManagerSecret"
      }
    }
  }
}